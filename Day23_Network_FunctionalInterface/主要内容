1.网络编程
2.函数式接口







一.网络编程
    1.基本概念:
        c/s结构
            Client/Server结构，是客户端和服务端的结构
        b/s结构
            Browser/Server结构，浏览器和服务端的结构

    2.网络的传输需要有网络的协议
        TCP/IP协议一共分为四层，分别是，物理层(数据链路层)、网络层、协议层、应用层分别负责不同的通信功能

    3.UDP和TCP的协议分类

        UDP:
            不用和服务端建立连接，可以直接发送和接收，不会确认接收端是否存在就会发送，速度快，消耗资源少，效率高
            但是有可能会丢失数据，数据限制在64kb以内，超出范围就不可发送

        TCP:
            客户端和服务端需要进行三次握手，需要连接保证数据的可靠性
            服务端先打开
            1.客户端给服务端发送连接请求
            2.服务端给客户端发送响应可以连接
            3.客户端再发送一次请求确认连接，然后连接

    客户端和服务端的连接需要IP地址:端口号
    ip地址:是每一台计算机特有的，计算机之间可以通过IP地址来找到对方的计算机,自己的计算机ip127.0.0.1
    端口号:是程序的交互端口，两台计算机的程序通过IP找到计算机后，再通过端口号找到需要交互的程序
        常用的端口号：
        1.80  网络端口
        2.数据库       mysql:3306      oracle:1521
        3.Tomcat服务器:8080


    4.TCP通信:
    Socket客户端:
        1.创建客户端对象 new Socket(String ip地址, int port(端口号))
        2. 使用客户端对象方法
            getOutputStream()   返回该客户端的字节输出流
            getInputStream()    返回该客户端的字节输入流
            然后继续用父类的方法就可以进行客户端和服务端的通信
        3.关闭客户端，释放资源 close()

    ServerSocket服务端:
        1.创建服务端对象 newServerSocket(int port(端口号))
        2.使用服务端对象的方法 Socket accept()   接收到服务端
        3.然后用客户端创建字节输出流和输入流进行与客户端的交互
        4.关闭客户端和服务端

    注意:
        1.客户端和服务端进行交互，必须使用客户端Socket()的网络流，这样一一标示
        2.当服务端使用accept(),创建客户端Socket的时候，客户端和服务端就会3次握手建立连接


    5.阻塞问题
        在使用while()读取的时候，网络的读取传输会读取到-1，但不会存储到缓存区中，所以在网络输入流接收的时候不会接收到-1，这样就会一直死循环
        所以需要方法
            shutdownOutput() 关闭输出流来达到目的
            也有一个方法:
            shutdownInput() 这个是关闭输入流

    6.B/S模拟器
        在浏览器输入网址后，服务端会接收到一堆数据
        然后在一堆数据中截取到网址信息，然后通过网址信息，来获取html文件的路径，然后返回到浏览器给客户



二.函数式接口
    1.基本概念:
        函数中，只有一个抽象方法的接口，就是函数式接口

    2.@FunctionalInterface注解
        写在类上面，如果类是一个函数式接口的话就不会报错，类似于方法重写的@Override的注解

    3.Lambda延迟执行的特点
        就类似于日志案例，如果传递的方法是String，那无论日志是否输出，字符串都会拼接，但是如果传递的是
        Lambda匿名函数，就可以在方法中判断，当判断成立，才会使用Lambda表达式来进行字符串拼接

    4.Supplier函数式接口
        生产者接口，Supplier<T> ，不用传递参数，当T是什么的时候.get()方法就返回什么
        T get() 。重写get方法，返回值可以返回传入的泛型类型

    5.Consumer函数式接口
        消费者接口,Consumer<T>, accept方法需要传递参数，当接口是什么泛型，传递的就是什么参数可以使用
        void accept(T t)，没有返回值，参数可以传递接口选择的泛型然后重写使用
        c1.andThen(c2) andThen方法就是让c1先做，然后c2再做，一步一步来

    6.Predicate函数式接口
        判断型接口，Predicate<T>
        boolean test(T t) 对传入的泛型可以进行重写判断，返回布尔值
        p1.and(p2).test(T)  可以让p1和p2都进行test(T) 判断，如果都为true，就返回true 相当于 || 与运算
        p1.or(p2).test(T)   p1,p2都进行判断，一个真就为真   相当于 && 或运算
        p1.negate().test(T) p1判断为true的话就返回false，相当于 ！

    7.Function函数式接口
        转换型接口，Function<T t, R r>,进行前面的类型可以转换成后面的类型
        R apply(T)  重写方法，可以让T转换返回成R
        f1.andThen(f2).apply    可以进行多个接口的转换，f1的return会返回给f2
