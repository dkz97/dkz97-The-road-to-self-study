1.xml
2.Jsoup




一.Xml
    1.概念: Extensible Markup Language  可扩展标记语言
        可扩展: 就是里面的标签都是可以自己定义的

    2.功能: 以前是为了和html争位置，然后现在的话就主要为配置文件和用于在网络中传输，类似于properties
        存储数据:
            1.用来做配置文件
            2.用来网络的传输

    3.xml和HTML的区别
        1.xml的标签都是自定义的，html的标签是预定义
        2.xml的语法格式十分严格，html的话比较松散
        3.xml用来存储数据，html用来展示数据

    4.基本语法
        1.xml文件的后缀名 .xml
        2.xml的第一行必须是文档声明 <?xml 属性=属性值 ?>
        3.xml中有且只有一个根标签
        4.属性值必须使用引号引着
        5.标签必须正确的闭合
        6.xml标签名称区分大小写

    5.各个组成部分
        1.文档声明
            1.格式<?xml 属性列表?>
                属性列表:
                    version: 版本号，必须的属性
                    encoding: 编码方式，告诉解析引擎这个xml应该用什么编码方式 默认为 ISO_8859-1
                    standalone: 是否独立，值有yes和no，yes的话就是说明xml文档不依赖其他文件

        2.指令(了解即可) 主要是结合css让xml在页面中更好的展示
            <?xml-stylesheet type="css文件路径" href="文件名称">

        3.标签: 名称自定义
             名称可以包含字母、数字以及其他的字符
             名称不能以数字或者标点符号开始
             名称不能以字母 xml（或者 XML、Xml 等等）开始
             名称不能包含空格

        4.属性:
            标签的id属性值唯一

        5.文本:
            如果想要展示和写的大小写等符号一模一样出来的，就需要把那段话写在CDATA区，不然要用转义符号才能写大小写等符号
                格式: <![CDATA[ 数据 ]]>

    6.约束: 就是对xml文档的书写规则进行约束
        程序员基本上都是框架的使用者
        而框架的开发者需要写配置文件，然后配置文件又不能乱写，所以就需要又约束文件这个东西来约束配置文件的写入数据

        约束文档有两种类型:
            1.DTD
                将dtd文档引入到xml文档中
                1.内部dtd: 就是直接在xml文档中写dtd <!DOCTYPE 根标签名 [dtd规则]>
                2.外部dtd: 在其他地方的dtd文档，引入到xml文件中
                    本地: <!DOCTYPE 根标签名 SYSTEM "dtd文件的位置">
                    网络: <!DOCTYPE 跟标签名 PUBLIC "DTD文件名字" "dtd文件的位置url">
            2.Schema
                引入:
                1.填写xml文档的根元素
                2.引入xsi前缀, xmlns:xsi=xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" (固定)
                3.引入xsd文件的命名空间(在xsd文件中有说明的)  xsi:schemaLocation=" 自定义命名空间(多数是网页)  schema文件路径"
                4.给每一个schema文件起一个别名，以便在下面使用这个约束文件的时候区分是哪个schema文件 xmlns:别名="自定义命名的schema文件"

                    <根标签 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                           xsi:schemaLocation="自定义命名空间(多数是网页)1  schema文件路径1
                                               自定义命名空间(多数是网页)2  schema文件路径2
                                               ...."
                           xmlns:别名 = "自定义命名空间(多数是网页)1"
                           xmlns:别名2 = "自定义命名空间(多数是网页)2"
                    >
                    </根标签>


    7.解释xml:
        就是把xml文档在硬盘中的数据读取到内存中使用
        操作xml文档:
            1.解析(读取): 将文档中的数据读取到内存中
            2.写入:将内存中的数据保存到xml文档中，持久化存储

        解释xml的方式:
            1.DOM: 就是把xml文档的标记语言一次性的读取到内存当中，形成dom树进行操作
                优点: 操作方便,可以对文档进行CRUD所有操作
                缺点: 比较占内存
            2.SAX: 一行一行的读取，读取了下一行之后，上一行在内存中消失，基于事件驱动
                优点: 不占内存
                缺点: 只能读取，不能做其他操作

        解释xml使用解析器，常见的解析器有:
            1. JAXP：sun公司提供的解析器，支持dom和sax两种思想
            2. DOM4J：一款非常优秀的解析器
            3. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。
                    它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。
            4. PULL：Android操作系统内置的解析器，sax方式的。


        解释器主要使用jsoup，虽然jsoup是解析html的，但是也可以对xml文档进行解释，并且执行crud的操作


    8.jsoup入门

        使用步骤
            1.导入Jsoup的jar包
            2.使用jsoup来获取xml文件的document对象
            3.使用document对象来获取element对象
            4.然后使用element对象来获取数据

        各个对象的解释:
            Jsoup: 是一个工具类，可以解释xml或者html文档，让文档在内存和硬盘中的读取和写入
                主要方法: parse() 解释xml/html文档，解释到内存中，形成doc树，返回Document对象
                    parse(String html): 解释xml或者html的语法字符串
                    parse(File in,String charsetName): 解释xml/html文件，并且指定使用什么编码来读取
                    parse(Url url,int timeoutMillis): 通过网络路径url来获取文档，然后设置延迟多少秒就结束

            Document: 文档对象，代表的是从文件中读取到的 存在于内存中的doc树
                获取Element对象:
                    getElementById​(String id)：根据id属性值获取唯一的element对象
                    getElementsByTag​(String tagName)：根据标签名称获取元素对象集合
                    getElementsByAttribute​(String key)：根据属性名称获取元素对象集合
                    getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合

            Elements: 元素Element对象的集合。可以当做 ArrayList<Element>来使用

            Element: 元素对象
                1.获取子元素
                     getElementById​(String id)：根据id属性值获取唯一的element对象
                     getElementsByTag​(String tagName)：根据标签名称获取元素对象集合
                     getElementsByAttribute​(String key)：根据属性名称获取元素对象集合
                     getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合
                2.获取属性值
                    String attr("属性名") : 根据属性名称来获取属性值
                3.获取当前元素的文本内容
                    String text(): 只获取文本的内容
                    String html(): 会把标签和文本所有的内容都获取得到

            Node(节点对象):
                是Document和Element的父类


        快速查询的方式:
            可以使用对象来一个一个进行查询，但是会比较慢，然后jsoup有两种快速查询的方式
                1.selector: 选择器
                    主要的方法: Elements select(String cssQuery)
                        传入的参数主要是css的选择器语法比如找class的就 ".class" 找id的就 "#id"  找元素名称的就 "元素名称"

                2.XPath: Xpath就是XML的路径语言，用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言
                    1.使用Jsoup的Xpath需要额外导入jar包。
                    2.new JXDocument(doc对象) 传入doc对象创建JX对象
                    3.使用方法 List<JXNode> SelN("xpath语法")
                    3.查询w3cshool参考手册，使用xpath的语法完成查询
