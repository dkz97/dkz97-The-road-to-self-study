1.Oracle的概述

    体系结构:
        Oracle可以看成是一个大的数据库，一个数据库可以有多个实例

        管理表的基本单位是用户

        一个表空间有多个用户。
        表空间里面有很多张表，并且存储一个或者多个dbf/ora    就是存储多个数据文件



二.Oracle操作

    1.创建表空间和创建用户
        create tablespace 名称
        datafile '路径'
        size 文件大小
        autoextend on
        next

            itcast 为表空间名称
            datafile 指定表空间对应的数据文件
            size 后定义的是表空间的初始大小
            autoextend on 自动增长 ，当表空间存储都占满时，自动增长
            next 后指定的是一次自动增长的大小

    2.删除表空间
        drop tablespace 名称

    3.创建用户
        create user 用户名称 identified by 用户密码 default tablespace 创建于哪个表

    4.给用户授权
        grant 权限 to 用户名称
            权限:
                connect  连接角色
                resource  开发者角色
                dba     超级管理员橘色


    oracle的数据类型
        1.varchar()  varchar2()     表示一个字符串
        2.number    number(n)表示一个整数，长度为n   number(m,n) 表示一个小数，总长度为m,小数长度为n，整数长度为m-n
        3.Data      表示日期
        4.CLOB      表示大文本数据类型
        5.Blob      表示大对象，二进制的数据


    5.对于表的管理(开始和Mysql差不多)

        1.创建表
        create table 表名称(  名称 类型, 名称 类型 )

        2.修改表结构
            2.1 添加一列
                 alter table 表名称 add (列名称 属性)
            2.2 修改列属性
                 alter table 表名称 modify 列名称 属性
            2.3 修改列名称
                 alter table 表名称 rename 旧列名称 to 新列名称
            2.4 删除一列
                 alter table 表名称 drop column 列名称

        3.表记录

            3.1 查询所有记录
                 select * from 表名称
            3.2 添加一条记录
                 inset into 表名称(列名称) value (值)
            3.3 修改一条记录
                update 表名称 set 列名称 = 新值 WHERE 唯一条件

            3.4三个删除
                删除表全部记录
                    delete from 表名称
                删除表
                    drop table 表名称
                先删除表，然后再创建表（数据大的话，效率比第一个高）
                truncate table 表名称


    6.序列
        很多数据库都有一个自增长的功能，但是oracle要完成自增长功能的话，就需要用到序列

        序列：默认从1开始，依次递增，主要给主键赋值使用 sequence 就是序列

        create sequence  表名称; 这样可以创建一个序列的表

        然后在添加id的时候，使用  序列表.nextval  这个值填入，就相当于把当前序列给添加进去
            例如 insert into person(pid,username) values(序列表.nextval,'zhangsan');


    7.解锁Scott用户来进行各种操作演示

        alter user scott account unlock;    解锁用户

        alter user scott identified by tiger;   解锁用户密码，也可以用这个重置密码



    8.单行函数:作用于一行，返回一个值
        字符函数
            upper( xxx ) 将xxx变成大写
            lower( xxx ) 将xxx变成小写
        数值函数
            round(m,n) 将m值四舍五入,n为保留多少小数，可以为负值
            trunc(m,n) 直接截取看n保留多少小数，不四舍五入
            mod(m,n) 求m/n的余数
        日期函数
            sysdate 当前的时间
            months_between(m,n) 两个时间段的月数
        转换函数
            to_char() 转为字符串
            to_date('时间','时间格式 例 fm yyyy-mm-dd hh24:mi:ss') 转为日期
        通用函数
            nvl，null处理(当任何值和null相加都为null)
                nvc(m,n) 当m为null 的时候，输出值n


    9.case When函数
        整体的意思就是 case 列名称
                        when 列明.值1 then 别名1
                            when 值2 then 别名2
                                else 别名  end

        根据case 后面的列，当值等于值一的时候，修改名称为别名1
        这个表达式是用在select 后面

        当然也可以用于判断
            case 列名称
                when 列名称.值1 < 100 then 别名1
                    when 列名称.值2 < 50 then 别名2
                        else 别名  end


        等于decode 表达式
                decode (列名
                    值1,别名1,
                    值2,别名2,
                    ) "别名"

        注意: oracle除了起别名要用双引号，其他都用单引号

    10.多行函数
        count() 列值的总数量
        max() 最大值
        min() 最小值
        avg() 平均数
        sum() 总和


    11.分组查询
        分组统计需要使用 GROUP BY 来分组

        语法：语法：SELECT * FROM 表名 {WHERE 查询条件} {GROUP BY 分组字段} ORDER BY 列名 1 ASC|DESC，列名 2...ASC|DESC  having 聚合函数判断条件

        asc|desc，正序|倒序

        注意:
            1.先WHERE 再 GROUP BY
            2.分组查询 select 后面的只能是原本列，或者聚合函数
            3.having 是分组后做的
            4.Where 判断的是分组前的数据，having判断的是分组后的数据 where 必须在group by 前 having 必须在 group by 后

    12.多表查询

        使用一张以上的表做查询就是多表查询

        1.(内连接查询)
        语法： SELECT {DISTINCT} *|列名.. FROM 表名 别名，表名 1 别名{WHERE 限制条件 ORDER BY 排序字段 ASC|DESC...}

        2.(外连接查询)
        语法: SELECT {DISTINCT} *|列名.. FROM 表名 别名 left join 表名 1 别名{WHERE 限制条件 ORDER BY 排序字段 ASC|DESC...}
            意思就是查询左边全部，然后右边查询符合条件的

        3.oracle 专用外连接查询
            select * from 表1，表2 where 表1.条件(+) = 表2.条件
            哪里有加的，就查询哪边的全部

        4.自连接
            站在不同的角度上，把一张表看成多张表


    13.子查询

        子查询就是在一个查询里面  后面也有一个查询

        子查询在操作中有三类：
            单列子查询：返回的结果是一列的一个内容
            单行子查询：返回多个列，有可能是一个完整的记录
            多行子查询：返回多条记录


    14.分页查询
        ROWNUM:表示行号，实际上此是一个列,但是这个列是一个伪列,此列可以在每张表中出现。

        没查询出一条记录的时候，都会在该行加上一个行号
        行号从1开始，依次递增，不能跳着走

        如果涉及到排序的话，使用rownum的时候，需要使用再次嵌套查询再次给一个行号才行，不然的话排序一变，rownum就乱了

        但是我们不能取到中间几行，因为rownum不支持大于号，只支持小于号，如果想 实现我们的
            需求怎么办呢？答案是使用子查询，也正是oracle分页的做法。

        至于为什么不支持大于号，因为是先判断再进行查询，刚开始rownum默认为1，所以不可能大于其他，只有查询了之后才会出来

        select * from (select rownum rm, a.* from (select * from emp) a where rownum < 11) b where b.rm > 5

            上面的语句，很巧妙的就是，第三层查询，用的是第二层查询出来的 rownum，这样的话就相当于把他看成一列普通的列而已


    15.视图

        概念:
            就是一条封装了复杂查询的语句，视图会连接表，视图只是一个窗口，用来看的，是没有存储数据的，但是修改视图的数据，也会修改原表的数据

        语法 1.：CREATE VIEW 视图名称 AS 子查询   (视图就会出现子查询的信息)

        语法 2：CREATE OR REPLACE VIEW 视图名称 AS 子查询
                如果视图已经存在我们可以使用语法 2 来创建视图，这样已有的视图会被覆盖。

        我们可以设置视图为只读。
                语法 3：CREATE OR REPLACE VIEW 视图名称 AS 子查询 WITH READ ONLY


    16.索引

        就类似于图书馆的图书加上了标签，可以大大的提高查询速度，但是增删改就会变慢

        1.单列索引
            单列索引是基于单个列进行创建索引，只对一列进行服务
            create index 索引名 on 表名(列名)

        2.复合索引
            复合索引是基于两个列或多个列的索引。在同一张表上可以有多个索引，但是
                要求列的组合必须不同,比如：
            Create index emp_idx1 on emp(ename,job);
            Create index emp_idx1 on emp(job,ename);

        注意:
            索引的使用原则：
                在大表上建立索引才有意义
                在 where 子句后面或者是连接条件上的字段建立索引
                表中数据修改频率高时不建议建立索引


    17.pl/sql 编程语言 (主要就是在oracle 上用来编写存储过程和存储函数等等)

        程序语法：
        declare
            说明部分 （变量说明，游标申明，例外说明 〕
        begin
            语句序列 （DML 语句〕…
        exception
            例外处理语句
        End;


        说明部分:
            就是定义变量，定义游标(类似于列表，变量存储多个值)等等

            基本类型
                变量名称  类型  :=  值    (使用 := 来赋值)
            引用型变量
                变量名称 表名| 表名.列名%type;     (可以给变量赋值一些引用变量)
            记录型变量
                变量名称 表名| 表名.列名%rowtype


            注意:
                1. oracle 使用 || 两个竖线来进行输出拼接
                2. 在语句序列中  select * into 变量 from 表名；   可以将查询到的东西，通过into 加入到变量中(变量要和查询出来的类型要相同)
                3. &值  就可以在控制台上输入东西


            游标:Cursor
                类似于集合的概念
                    语法:
                        cursor 游标名 [(参数1 类型,参数2 类型)] is Select语句; (就是把select查询到的东西给到游标中)

                            例如：cursor c1 is select ename from emp;
                            游标由于是列表，所以基本上都是加上循环进行使用的，拿到的数据给到变量中

                                游标的使用步骤：
                             打开游标： open 游标名
                             取一行游标的值：fetch 游标名 into 变量 (添加到的变量类型必须和在游标取出的一样)
                             关闭游标： close 游标名
                             游标的结束方式 exit when 游标名%notfound    (这个是和loop 一起用的， 当游标没有的时候，循环退出)

                            例子(就是一个循环，每拿到一个就给到变量，当游标没有下一个的时候，退出循环，并且关闭游标)
                                loop
                                open 游标名
                                fetch 游标名 into 变量
                                exit when 游标名%notfound
                                end loop;
                                close 游标名

        在begin内的语句部分
            1.if分支

                if 条件 then
                    语句1;
                elsif 条件2 then
                    语句2;
                else
                    语句3;
                end if;

                elsif 可以省略，else也可以省略


            2.loop循环语句
                语法一:
                    while 条件 loop
                        各种语句
                    end loop;

                语法二:
                    loop
                        exit [when 退出条件]
                        语句
                    end loop;

                语法三:（i是变量，1到3）
                    for I in 1 .. 3 loop
                        语句
                    end loop;



        存储过程(相当于定义方法) 关键字procedure

            存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的 SQL 语句集，经
                编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来
                执行它。存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程。


            创建存储过程：
                create [or replace] procedure 过程名(参数1 in/out 类型，参数2 in/out 类型...)
                as

                begin
                    plsql语句
                end;

            相当于创建一个方法  然后 as 后面的就是方法体，过程名就是方法名，参数就是参数，
            参数: in 的就是输入的参数   out，就是方法可以获得的参数，就是过程中赋值的参数

            replace 就相当于如果有这个表的话就覆盖


        存储函数(可以定义返回值的方法)  关键字 function
            create or replace function 函数名(Name in type, Name in type, ...) return 数据类型 is 结果变量 数据类型;
            begin
             return(结果变量);
            end 函数名;


        存储过程和存储函数的区别
            一般来讲，过程和函数的区别在于函数可以有一个返回值；而过程没有返回值。
            但过程和函数都可以通过 out 指定一个或多个输出参数。我们可以利用 out 参数，在过程和函数中实
            现返回多个值。




        触发器(就是可以设置，当增或删或改的时候，在之前还是之后必定触发的事情)

            数据库触发器是一个与表相关联的、存储的 PL/SQL 程序。每当一个特定的数据操作语句】(Insert,update,delete)在指定的表上发出时，Oracle 自动地执行触发器中定义的语句序列。


            触发器可用于
                数据确认
                实施复杂的安全性检查
                做审计，跟踪表上所做的数据操作等
                数据的备份和同步


            触发器类型:
                语句触发器： 在指定的操作语句操作之前或者之后执行一次，不管这条语句影响了多少行

                行级触发器(for each row): 设定是增，删，还是改，然后当触发后，每一条语句都会进行触发，在行级触发器中使用old和new进行伪变量


                CREATE [or REPLACE] TRIGGER 触发器名
                 BEFORE | AFTER
                 DELETE | INSERT | UPDATE [OF 列名]
                 ON 表名
                 [FOR EACH ROW [WHEN(条件) ] ]
                begin
                 PLSQL 块
                End 触发器名

                trigger: 触发器的关键字
                before | after : before就是在触发之前执行，after就是触发之后执行
                delete | insert | update: 设置执行什么方法的时候触发
                on 表名 设置哪个表执行的时候触发
                for each row : 记录每次执行都会触发


                触发语句    :old                :new
                Insert  所有字段都是空(null)  将要插入的数据
                Update  更新以前该行的值      更新后的值
                delete  删除以前该行的值      所有字段都是空(null)


            如果要使用java 调用存储过程
                oracle 10g 的话就使用 ojdbc14版本
                oracle 11g 的话就使用 ojdbc6版本