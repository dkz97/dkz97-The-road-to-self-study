1.javaScript基础









一.JavaScript基础
    1.概念:
        一门客户端的脚本语言，运行在浏览器的客户端中，每一个浏览器都有这个语言的解释引擎，
    2.功能:
        主要是用于增强用户和html页面的交互，控制html元素，增加动态效果，增强体验
    3.发展史:
        Netscape(网景)开发，ECMA统一三个语言的标准
        JavaScript = ECMAScript + JavaScript(自己特有的BOM+DOM)

    4.ECMAScript: 客户端脚本语言的标准
        1.基本语法:
            1.在html中的写法
                1.内部的JS:
                    使用标签<script>标签体的内容就是JS代码</script>
                2.外部JS:
                    定义js文件，然后使用标签<script> 中的src属性来引入js文件

                注意:
                    <script>标签可以放在html页面的任何地方，但是定义的位置会影响执行的顺序
                    <script>可以定义多个

        2.注释:
            和java一样  单行//  多行/*  */

        3.数据类型:
            1.原始数据类型
                1.number:   就是数字，整数/小数/NaN(就是一个不是数字的数字)
                2.string:   字符串，javascript中所有的字符都看成字符串
                3.boolean:  true和false, 和python一样，数字和其他类型的都可以转换成boolean
                4.null:     一个为空的占位符
                5.undefined:未定义，如果一个变量没给初始化值，都为这个，而不是为null,因为在变量定义的时候没有给特定的数据类型
            2.引用数据类型:
                1.对象

        4.变量:
            概念:一小块存储数据的内存空间,java中有指定内存空间放入的数据类型，这个没有
            所以java是强类型，而javascript是弱类型的语言
            创建语法:
                var 变量名 = 初始化值;

            typeof运算符：获取变量的类型。
                * 注：null运算后得到的是object

        5.运算符:
            1.一元运算符:
                ++  --  +\-(正负号)
                注意:
                    在js中，如果运算的时候，不是同一个数据类型运算，则js引擎会自动转换
                        其他类型转number:
                            string转number: string会按照字面值转换成number，如果不全是数字，则想加得NaN
                            boolean转number: true为1，false 为0

            2.算术运算符:
                > < >= <= == ===(全等于)
                	* 比较方式
                	    1. 类型相同：直接比较
                	        * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。
                	    2. 类型不同：先进行类型转换，再比较
                	        * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false

            3.比较运算符:
                = += -+....
            4.赋值运算符:
                = += -+....
            5.逻辑运算符:
                && || !
                    * 其他类型转boolean：
                	    1. number：0或NaN为假，其他为真
                	    2. string：除了空字符串("")，其他都是true
                	    3. null&undefined:都是false
                        4. 对象：所有对象都为true

            6.三元运算符:
                语法: 表达式 ? 值1 : 值2
                    判断表达式的值，true则返回值1，false则返回值2

        6.流程控制语句:
            1. if...else
            2. switch:   switch(变量): case(值1): case(值2)  判断变量为哪个值，则输出哪个值中的代码块
            3. while:
            4. do..while
            5. for

        7.JS的特殊语法:
            1. 语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)
            2. 变量的定义使用var关键字，也可以不使用
                * 用： 定义的变量是局部变量
            	* 不用：定义的变量是全局变量(不建议)

    5.基本对象:
        1.Function:
            function,函数对象，就相当于java的方法对象
                1.创建方法:
                    1.var 方法名 = new Function(参数列表,方法体); (基本不用)
                    2.var 方法名 = new function(参数列表) {方法体};
                    3. function 方法名(参数列表) {方法体};
                2.属性:
                    length:代表的是参数列表的个数
                3.特点:
                    1.方法定义中，参数列表的类型不用写，返回值也不用写
                    2.方法是一个对象，如果定义名称相同的方法则会覆盖，而不是重载
                    3.方法调用只与名称有关，如参数列表无关
                    4.可以传入多个参数，会存储到参数列表对象中，arguments这个对象会封装所有的实参列表
                4.调用:
                    方法名称(实参列表)

        2.Array:
            1.创建:
                var 数组名称 = new Array(多个数数组列表);
                var 数组名称 = new Array(单个数数组长度);
                var 数组名称 = [数组列表];
            2.Array的方法:
                join(参数): 将数组中的每个元素，根据传入的参数作为间隔拼接在一起成为字符串
                push(): 在数组末尾添加一个元素
            3.属性:
                length: 返回数组的长度
            4.特点:
                数组可以传入任何类型，传入类型不是固定统一
                数组长度可变

        3.Boolean: boolean的包装类

        4.Date:日期对象
            1.创建:
                var date = new Date()
            2.Date的方法:
                toLocaleString(): 返回当前date对象对应的本地时间的字符串
                getTime(): 返回时间戳

        5.Math:数学对象
            1.创建
                不用创建可以直接使用， Math.方法名()
            2.Math的方法:
                random(): 返回0~1的随机数，含头不含尾
                ceil(x): 对x进行向上舍入
                floor(x): 对x进行向下舍入
                round(x): 对x进行四舍五入
            3.属性
                PI: 返回圆周率

        6.Number: 包装类
        7.String: 包装类

        8.RegExp: 正则表达式的对象
            1.创建
                1.var reg = new RegExp("正则表达式")
                2.var reg = /正则表达式/;  (建议使用)
            2.方法:
                test(参数): 根据当前对象所创建的正则表达式，来验证给入的字符串是否符合定义规范，符合就返回true

            正则表达式的概念:
                1. 正则表达式：定义字符串的组成规则。
                	1. 单个字符:[]
       					如： [a] [ab] [a-zA-Z0-9_]
                			* 特殊符号代表特殊含义的单个字符:
                			    \d:单个数字字符 [0-9]
                			    \w:单个单词字符[a-zA-Z0-9_]
                    2. 量词符号：
                		?：表示出现0次或1次
                		*：表示出现0次或多次
                		+：出现1次或多次
                		{m,n}:表示 m<= 数量 <= n
                			m如果缺省： {,n}:最多n次
                			n如果缺省：{m,} 最少m次
                	3. 开始结束符号
                		^:开始
                		$:结束

        9.Global:
            1.创建:
                不用创建，全局对象，不需要对象就可以直接使用  使用方式：  方法名称();

            2.方法:

            encodeURI(String):url编码
            decodeURI():url解码

            encodeURIComponent():url编码,编码的字符更多
            decodeURIComponent():url解码

            上面的四个方法都是进行编码和解码，编码传入字符串，变成16进制的码，解码就解码

            parseInt(): 传入字符串，将字符串转换为数字
                转换规则: 逐一判断字符串是否是数字，直到不是数字为止，会将前面数字的部分转化为number返回

            isNaN(): 潘敦传入的值是否NaN

            eval(): 会将传入的javaScript代码字符串，转换为javaScript来执行




二.JavaScript高级
    1.javascript 主要是由ECMA的标准和自身的DOM和BOM组合而成的，然后BOM说的是浏览器的操作模型，DOM也包括在BOM内,但是由于DOM较为庞大所以
        单独拿出来进行讲，DOM就是document object model 文档操作模型.

    2.DOM的简单学习
        功能: 控制html页面文档内容
        获取页面标签(元素)对象: Element对象
            document.getElementById("标签的id值") 根据标签的id值获取标签(元素)对象，然后对用方法和修改属性对标签(元素)内容进行修改
        操作Element对象:
            1.修改属性值的步骤
                明确获取到的Element对象是哪个
                查找api文档看看这个标签(元素)有什么属性值，然后用 对象.属性名 = 修改后的值
            2.修改标签体内的内容
                使用方法:
                    对象名称.innerHTML = 新的标签体内容
                    对象名称.innerHTML += 增加标签题内容( -=也是一个道理 )

    3.事件的简单学习
        什么是事件？ 事件就是当某个元素，被进行某些的操作，然后促发了某些代码执行的，就叫事件，比如点击元素促发弹窗，输入数据会促发弹窗等

        如果锁定事件？
            1.直接在html上，指定事件的属性操作， 属性操作是js代码

            2.通过js代码获取事件的对象，然后设定事件属性 = 一个函数
                比如单击事件，以下就是鼠标单击这个对象的时候就可以执行这个函数
                对象.onclick = 函数名或(function() {函数体})



    4.BOM的详讲:
        1.概念:
            BOM: Browser object model 浏览器对象模型，主要是将浏览器的各个组成部分，封装成对象，让开发人员可以使用对象操作组成部分

        2.组成部分:
            Location 地址栏对象
            History 历史记录对象
            Screen  显示器屏幕对象
            Window  窗口对象
            Navigator 浏览器对象

        3.window 窗口对象:
            1.创建:
                window对象不用创建，是全局对象，下面的方法可以直接使用方法名称() 就可以调用了
            2.方法:
                a.和弹出窗口有关的方法:
                    alert("弹出窗口的内容") : 页面弹出一个只有确定按钮的窗口
                    confirm("弹出窗口的内容") : 页面会弹出一个有确定和取消按钮的窗口，点确定返回true点取消返回false
                    prompt("提示内容"): 页面弹出一个输入框，返回用户输入的值

                b.与窗口打开关闭有关的方法:
                    open(): 打开一个新的window窗口对象，并且会返回一个新的窗口对象
                    close(): 关闭浏览器窗口，关闭的原理，哪个窗口对象调用close的话，就关闭哪个窗口对象

                c.与定时器相关的方法:
                    setTimeout(js代码或者函数, 毫秒值): 在指定毫秒值后调用括号内的函数或者计算表达式
                        会返回这个计时器的唯一标示编号，用来关闭的
                    clearTimeout(计时器标示编号)

                    setInterval(js代码或函数, 毫秒值) 按照指定的周期时间循环调用括号内的函数或者计算表达式,返回值是计算器的唯一编号
                    clearInterval(计时器的编号) 关闭计时器
            3.属性:
                获取其他BOM对象:
                    location
                    navigator
                    history
                    screen
                获取DOM对象:
                    document
            4.特点:
                不用创建就可以使用window下的方法和属性

        4.location 地址栏对象:
            1.创建:
                window.location
                location

            2.方法:
                reload() 重新加载当前文档，就是刷新的意思

            3.属性:
                href 设置或者返回当前窗口完整的URL

        5.History 历史记录对象
            1.创建:
                window.history
                history

            2.方法:
                back() 加载history 列表中的前一个url
                forward() 加载history 列表中的后一个url
                go(数字) 根据数字加载history列表中的某个具体页面，如果是正数则前进n个记录，如果是负数则后退n个记录

            3.属性:
                length 返回当前窗口历史列表中的URL数量


    5.Dom详讲:
        概念: document object model 文档对象模型，就是把文档拆分成各个组成部分，然后再将各个部分封装成对象，来使用对象来对内容进行增删改查

        DOM标准分为三个部分:
            1. 核心的DOM: 针对任何结构化文档的标准模型
                Document: 文档对象
                Element: (标签) 元素对象
                Attribute: 属性对象
                Text: 文档对象
                Comment: 注释对象

            2. XML文档的DOM:  针对XML文档的标准模型

            3. HTML文档的DOM: 针对HTML文档的标准模型


        核心的DOM各个对象详解:
            1.Document: 文档对象
                1.创建: 在HTML DOM对象可以使用window对象来获取
                    window.document
                    document
                2.方法:
                    1.获取Element对象
                        getElementById("id值") : 根据对应的id值来获取元素的Element对象
                        getElementsByName("name值") : 根据对应的name值来获取Element的对象们，返回是一个数组
                        getElementsByTagName("元素(标签)名称") : 根据对应的元素(标签)名称来获取Element对象们，返回的是一个数组
                        getElementsByClassName("Class值"): 根据对应的Class值来获取Element对象们，返回的是一个数组

                    2.创建其他对象
                        createAttribute("属性名称","属性值")
                        createTextNode("String")
                        createComment()
                        createElement("标签名称")
                3.属性:
                    Element:元素对象
                        1.获取/创建: 通过document来获取和创建
                        2.方法:
                            1.removeAttribute("属性名称"): 删除属性
                            2.setAttribute("属性名称","属性值"): 设置属性

                    Node:节点对象
                        1.其他5个对象的父对象，只要是dom对象都可以认为是一个节点
                        2.方法:
                            对dom树进行增删改查
                            appendChild(节点对象): 向节点的子节点列表的结尾添加新的子节点
                            removeChild(节点对象): 删除并且返回当前节点的指定子节点
                            replaceChild(): 替换一个新的子节点
                        属性:
                            parentNode 返回子节点的父节点

            2.HTML 的 DOM
                1. 标签体的设置和获取：使用innerHTML属性

                2. 使用html元素对象的属性
                    使用Element对象来 .属性来进行更改

                3. 控制元素样式
                    1. 使用元素的style属性来设置
                        元素对象.style.属性名 = 属性值
                    2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。
                        提前定义css代码，然后使用.类名称{}定义，然后用元素的对象.className = 设置好的类名称，就行了


    6.事件监听机制
     概念：某些组件被执行了某些操作后，触发某些代码的执行。
        * 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了
        * 事件源：组件。如： 按钮 文本输入框...
        * 监听器：代码。
        * 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。


    * 常见的事件：
        1. 点击事件：
            1. onclick：单击事件
            2. ondblclick：双击事件
        2. 焦点事件
            1. onblur：失去焦点
            2. onfocus:元素获得焦点。

        3. 加载事件：
            1. onload：一张页面或一幅图像完成加载。

        4. 鼠标事件：
            可以在定义函数的时候传入参数（event） 传入的是点击的事件对象
            1. onmousedown  鼠标按钮被按下。
            2. onmouseup    鼠标按键被松开。
            3. onmousemove  鼠标被移动。
            4. onmouseover  鼠标移到某元素之上。
            5. onmouseout   鼠标从某元素移开。


        5. 键盘事件：
            1. onkeydown    某个键盘按键被按下。
            2. onkeyup      某个键盘按键被松开。
            3. onkeypress   某个键盘按键被按下并松开。

        6. 选择和改变
            1. onchange 域的内容被改变。
            2. onselect 文本被选中。

        7. 表单事件：
            1. onsubmit 确认按钮被点击。
            2. onreset  重置按钮被点击。