1.完善account案例
2.分析案例中的问题
3.回顾动态代理技术
4.aop的概念
5.spring中aop的相关术语
6.spring中基于xml和注解的aop配置



一.
    完善account案例
        就是加上一个银行转账的方法  步骤如下:
            1.根据名称查询转出账户的信息
            2.根据名称查询接收账户的信息
            3.转出账户扣钱
            4.接收账户加钱
            5.更新转出账户
            6.更新接收账户

二.
    分析案例中的问题：
        主要就是没有事务控制，没有事务控制的话就一报错就会出现一些问题
            要做到把转行的事情都在一个连接上进行，只要在一个连接上进行的话，转账一出错事务就可以回滚了

    使用ThreadLocal对象，把connection和当前线程进行绑定。

        使用一个ConnectionUtils和TransactionManger自定义的一个工具类，利用的思路就是：
            1.获取当前线程的connection
            2.对connection进行绑定，如果没有connection的时候就在连接池中获取一个，并且绑定在线程中，保证同一个线程中同一个连接
            3.在TransactionManger 中，获取自定义工具类中的唯一连接对象，然后对对象进行事务的操作
            4.在释放资源的时候也要把线程和连接进行解绑

    事务注意事项：
        1.需要在service中进行事务管理，但是调用的是多个dao,所以连接对象不是唯一
        2.使用threadLocal 将连接对象变成唯一
        3.进行事务管理类 来操作事务管理(记得释放资源的时候要解绑connection)
        4.然后就可以在service中调用事务管理类来使用事务了

三.
    回顾代理技术
        为什么回顾代理技术呢，主要是因为要在service中进行事务的管理，代码的冗余太多，所以就需要代理技术来 进行方法加强
            在方法加强的那里进行事务管理

    选择一个对象，如果这个对象需要代理的，就使用代理对象
        当这个代理对象使用的时候，每当调用这个代理对象的方法，都会经过加强

    代理技术回顾：

        这个是需要代理对象有一个接口的，并且方法的返回值是代理对象的接口
            1. 使用Proxy类中的newProxyInstance方法
            2. 创建代理对象的要求：
                 被代理的类至少实现一个接口，没有则不能使用
            3. newProxyInstance 方法参数:
                 ClassLoader: 被代理类的类加载器
                     需要代理哪个类对象的话，就传入需要代理的类对象的加载器，主要是用于加载代理对象的字节码
                 Class[]: 字节码数组
                     让代理对象和被代理对象有相同的方法
                 new InvocationHandler: 用于提供增强的代码


        不需要接口的方法:
            1. 导入 cglib jar包
            2. 使用类Enhancer  ，第三方的cglib库
            3. 使用Enhancer中的create方法来创建代理对象
            4. 被代理类不能是最终类(就是类不能加final)
            5. create方法的参数
                Class: 字节码
                    用于指定代理对象的字节码

                Callback:
                    new MethodInterceptor:
                        用于提供增强代码


四.AOP的相关概念

    AOP：全称是 Aspect Oriented Programming 即：面向切面编程。

        就是在spring 中，使用配置，对代码进行加强，并且内部使用了代理模式，可以更好地抽取重复代码。


五.AOP的相关术语:

    1.JoinPoint(连接点)
        连接点，就是被拦截到的点，在spring中，连接点都是方法，因为spring的连接点只支持方法。
            例: 在service中，方法都是连接点，就好比如代理对象中能使用的方法都是连接点

    2.PointCut(切入点)
        切入点， 就是拦截后的点，并且进行了加强的定义。 就是已经拦截到的点，然后又进行了加强方法
            例子: 在代理对象中，进行了加强的方法，都是切入点， 切入点是要在连接点的前提上

    3.Advice(通知/增强)
        所谓的通知，就是拦截到JoinPoint之后要做的事情就是通知， 意思就是,增强方法做了的事情就是通知
            通知的类型:
                前置通知: 在方法调用之前
                后置通知: 在方法调用之后
                异常通知: 在调用方法进行了异常的时候(不会和后置通知一起出现)    类似于catch中的代码
                最终通知: 不管发不发生异常都会做的通知    类似于finally 中的代码
                环绕通知: 整个增强

    4.Introduction(引介)
        引介是一种特殊的通知，在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。

    5.Target(目标对象)
        要代理的对象就是目标对象

    6.Weaving(织入)
        就是整个代理过程，就从目标对象变成代理对象的过程
        spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入

    7.Proxy(代理)
        最终产生的代理对象，代理类

    8.Aspect(切面)
        切入点和通知的结合



    学习 spring 中的 AOP 要明确的事
        a、开发阶段（我们做的）
            编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。
            把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP 编程人员来做。
            在配置文件中，声明切入点与通知间的关系，即切面。：AOP 编程人员来做。

        b、运行阶段（Spring 框架完成的）
            Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对
                象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。



六. Xml中的AOP配置


    <!--spring中基于XML的AOP配置步骤
        1、  创建通知的Bean，交给ioc管理

        2、  <aop:config> 标签:
                表明开始AOP的配置

        3、  <aop:aspect>标签
                表明配置切面
                    id属性：是给切面提供一个唯一标识
                    ref属性：是指定通知类bean的Id。

        4、  在aop:aspect标签的内部使用对应标签来配置通知的类型

               <aop:before>：表示配置前置通知
               <aop:after-throwing>: 异常通知
               <aop:after-returning>: 后置通知
               <aop:after>: 最终通知
                    method属性：用于指定Logger类中哪个方法是前置通知
                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

               <aop:around> : 环绕通知

        5.  切入点表达式的写法：
                关键字：execution(表达式)

                表达式：
                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)

            标准的表达式写法：
                public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
            访问修饰符可以省略
                void com.itheima.service.impl.AccountServiceImpl.saveAccount()
            返回值可以使用通配符，表示任意返回值
                * com.itheima.service.impl.AccountServiceImpl.saveAccount()
            包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.
                * *.*.*.*.AccountServiceImpl.saveAccount())
            包名可以使用..表示当前包及其子包
                * *..AccountServiceImpl.saveAccount()
            类名和方法名都可以使用*来实现通配
                * *..*.*()
            参数列表：
                可以直接写数据类型：
                    基本类型直接写名称           int
                    引用类型写包名.类名的方式   java.lang.String
                可以使用通配符表示任意类型，但是必须有参数
                可以使用..表示有无参数均可，有参数可以是任意类型
            全通配写法：
                * *..*.*(..)

            实际开发中切入点表达式的通常写法：

                切到业务层实现类下的所有方法
                    * com.itheima.service.impl.*.*(..)


        5、 <aop:pointcut>
               用于配置切入点表达式。就是指定对哪些类的哪些方法进行增强。可以抽取冗余

                属性：
                    expression：用于定义切入点表达式。
                    id：用于给切入点表达式提供一个唯一标识


        6、 环绕通知
            在xml配置环绕通知，就相当于spring 可以给我们提供一个手动代码设置什么时候运行什么通知的

            提供了一个自带接口 ProceedingJoinPoint，需要在类中配置，参数就是这个接口

            1. 在通知类中创建一个通知方法，参数传递 接口ProceedingJoinPoint
            2. 在里面使用 接口的方法 proceed()， 就相当于代理对象中的invoke，调用方法
            3. 然后根据代码块的位置不同放不一样的位置就行  整个方法相当于一个代理增强方法



七.基于注解的Aop配置

1.xml头文件中加入注解
        配置中加入所需的扫描的包

2.指明类：
    @Aspect
        表明当前类是一个切面类


3.指明方法:
    @Before
        把当前方法看成是前置通知。

        属性：
        value：用于指定切入点表达式，还可以指定切入点表达式的引用。

    @AfterReturning
        把当前方法看成是后置通知。

        属性：
        value：用于指定切入点表达式，还可以指定切入点表达式的引用

    @AfterThrowing
        把当前方法看成是异常通知。

        属性：
        value：用于指定切入点表达式，还可以指定切入点表达式的引用

    @After
        把当前方法看成是最终通知。

        属性：
        value：用于指定切入点表达式，还可以指定切入点表达式的引用


    @Around
        把当前方法看成是一个环绕通知（一样使用ProceedingJoinPoint接口，然后使用方法proceed() 进行调用方法）

        属性：
        value：用于指定切入点表达式，还可以指定切入点表达式的引用


4.在xml中开启支持

    <!-- 开启 spring 对注解 AOP 的支持 -->
        <aop:aspectj-autoproxy/>


5.对切入点表达式进行抽取

    @Pointcut
        指定切入点表达式

        属性：
        value：指定表达式的内容

        @Pointcut("execution(* dkz97.service.impl.*.*(..))")
        private void pt1() {}


不使用 XML 的配置方式
    @Configuration
    @ComponentScan(basePackages="com.itheima")
    @EnableAspectJAutoProxy
    public class SpringConfiguration {
    }