1.会话技术的概念
2.Cookie
3.Jsp入门
4.Session





一.会话技术的概念
    1.一次会话中包含多次请求和响应
        一次会话:浏览器第一次给服务端发送资源请求的时候建立会话，然后直到双方有一个人断开为止，就结束会话

    2.功能
        会话可以在一次会话多次请求响应中共享数据，一个会话域

    3.方式:
        Cookie: 客户端会话技术，主要数据存储在客户端
        Session: 服务端会话技术，主要数据存储在服务端中


二.Cookie
    客户端会话技术，将数据保存在客户端中，使用原理是Cookie的请求头和响应头的键值对

    使用步骤:
        1.创建Cookie对象，绑定数据
            new Cookie(String name, String value)

        2.发送Cookie对象
            response.addCookie(Cookie cookie)

        3.接收Cookie对象
            Cookie[] request.getCookies()

    实现原理:
        设置的时候返回客户端的是响应头: set-cookie: 键名=值
        获取的时候，返回服务端的是请求头: cookie: 键名=值


    cookie的一些问题:
        1.一次会话能否发送多个Cookie
            可以发送多个Cookie数据，只要多次创建Cookie对象，并且多次调用方法addCookie就可以发送

        2.cookie在浏览器中保存多长时间
            默认情况下，浏览器关闭，会话就关闭，Cookie也相对应的关闭
            但是可以设置持久化存储:
                setMaxAge(int seconds)
                    1.正数: 将Cookie存储到硬盘中持久化存储，当一时间一过就会删除，默认为秒
                    2.负数: 默认值
                    3.零: 删除Cookie信息

        3.cookie能否存储中文
            tomcat8 之前不能直接存储中文，解决方法就是把中文编码成url，获取的时候再解码
            tomcat8 之后可以直接存储中文

        4.cookie的共享范围有多大
            1.同一个Tomcat中，不一样的web项目，cookie如何共享
                默认情况不能共享

                可以使用方法: setPath(String path):设置cookie的取值范围，默认情况是当前的虚拟目录下的可以共享，所以
                                想不一样的web项目共享的话，可以将值设置为 "/"

            2.不同的tomcat服务器中，cookie如何共享
                默认也是不行的，需要使用方法:

                setDomain(String path): 设置一次域名相同，那么服务器之间就可以共享
                如: setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com中cookie可以共享

    Cookie的特点和作用
        特点:
        1.cookie的数据存储在客户端中
        2.cookie存储的数据有限，一般为4kb，同一个域名下存储的cookie数量也有限制，一般为20个

        作用:
        1.一般用于数据量少，并且数据不太敏感的存储
        2.在用户不登陆的情况下，也可以完成服务端对客户端的身份识别。



三.Jsp入门
    java server pages: java服务器端页面

    可以理解为一个特殊的页面，其中可以写java代码也可以写html标签，比如servlet和html的交互的时候可以简化缩写

    jsp的本质就是一个servlet


    jsp的脚本: jsp定义的java代码的方式
    1.<% 代码 %>: 定义java的代码，写成servlet的话就是在service方法中，service可以定义什么，里面就能定义什么
    2.<%! 代码 %>: 定义java代码，jsp转换后相当于java类的成员的为止
    3.<%= 代码 %>: 定义java代码，可以输出到页面中，输出语句可以定义什么，这个就可以定义什么

    jsp的内置对象:
        内置对象的概念:
            就是在jsp页面中不用创建也可以获取的对象

        jsp一共有9个内置对象

        先说3个:
            request
            response
            out: 字符输出流对象，可以将数据输出到页面中，和response.getWriter类似
                response.getWriter()和out.的区别
                    1.tomcat服务器作出响应的时候，先找response缓冲区数据，再找out缓冲区的数据
                    2.response.getWriter()永远都输出在out.write()之前


四.Session
    服务端的会话技术，在一次会话中的多次请求和响应中，可以共享数据，并且把数据存储到服务器端的对象中 HttpSession

    快速入门:
        1.获取HttpSession对象
            request.getHttpSession

        2.使用HttpSession对象的方法
            Object getAttribute(String name)
            void setAttribute(String name, Object value)
            void removeAttribute(String name)

    Session的原理:
        就是依赖于Cookie的
        就是设置的时候，内部会将Session的方法变成cookie: JSESSIONID=设置的简直对的序列号
        Set-Cookie: JSESSIONID=2F92AFC1FBE43A5CF94AAC684F780019;
        所以获取的时候内部也会根据Cookie这个请求头来获取
        Cookie: JSESSIONID=2F92AFC1FBE43A5CF94AAC684F780019

    session的问题:
        1.客户端关闭后，服务器不关闭，两次获取的session是否为同一个
            默认情况下不是同一个session，因为会话已经是第二次了
            可以设置为相同，手动设置Cookie就可以，并且存活的时间长，将cookie存储在硬盘中

                Cookie c = new Cookie("JSESSIONID",session.getId())
                c.setMaxAge(xxx)
                resopnse.addCokie(c)

        2.客户端不关闭，服务器关闭，获取的session是否为同一个
            默认情况下也不是同一个，因为会话已经关闭了一次，这个是第二次会话了
            可以使用session的钝化和session的活化
                session的钝化:
                    在服务器正常关闭之前，将session对象系列化到硬盘中存储
                session的活化：
                    在服务器开启之后，将session对象的文件转化到内存中

        3.session的失效时间
            1.服务器被摧毁就失效
            2.session的自杀方法，直接使用方法 invalidate() 就会死亡
            3.可以通过修改配置文件来设置失效时间,在web.xml文件中配置
                <session-config>
                    <session-timeout>30</session-timeout>
                </session-config>

    Session和Cookie的区别
        1.Session的数据存储在服务端，cookie存储在客户端
        2.session没有数据大小限制，cookie有
        3.session的数据相对安全