1.SpringMVC概述
2.Spring的环境搭建
3.SpringMvc各个器
4.SpringMvc中的参数绑定
5.常用注解



一.SpringMvc的概述

    MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职：

        Model（模型）：
            通常指的就是我们的数据模型。作用一般情况下用于封装数据。

        View（视图）：
            通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的，通常视图是依据模型数据创建的。

        Controller（控制器）：
            是应用程序中处理用户交互的部分。作用一般就是处理程序逻辑的。

    概念:
        SpringMvc 就是spring框架中的一个小弟，然后主要是用于web层的，SpringMvc里面用的是三层架构，就是model-view-controller

        它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful 编程风格的请求。


    SpringMVC 的优势
    1、清晰的角色划分：
        前端控制器（DispatcherServlet）
        请求到处理器映射（HandlerMapping）
        处理器适配器（HandlerAdapter）
        视图解析器（ViewResolver）
        处理器或页面控制器（Controller）
        验证器（ Validator）
        命令对象（Command 请求参数绑定到的对象就叫命令对象）
        表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象

    2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。

    3、由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。

    4、和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。

    5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。

    6、可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。

    7、功能强大的数据验证、格式化、绑定机制。

    8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。

    9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。

    10、强大的 JSP 标签库，使 JSP 编写更容易。

    还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配
        置支持等等。


二. SpringMvc的入门案例以及环境搭建

    1.环境搭建

        1.需要建立的是maven的web模版
            1.1 导入jar包
                spring-context
                spring-web
                spring-webmvc
                servlet-api
                jsp-api

        2.需要配置springmvc.xml( 类似bean.xml 主要是用于创建各种对象)

        3.配置一个servlet (主要配置DispatcherServlet 核心控制器)
            <servlet>
            3.1 配置了servlet 的核心控制器以及映射之后
                需要在核心控制器下面配置 控制器一开始就下载Springmvc.xml这个配置文件，用于创建对象
                <init-param>
                      <param-name>contextConfigLocation</param-name>
                      <param-value>classpath:springmvc.xml</param-value>
                </init-param>
                <load-on-startup>1</load-on-startup>

        4.创建一个Controller 类，主要是加上注解就可以变成一个控制类
            主要给方法加上 @RequestMapper 这样的话就相当于(Servlet中的给予地址值访问)
            然后 加了注解的方法 的return  会返回给 视图解析器

        5.在spring.xml中配置视图解析器对象
            InternalResourceViewResolver
                主要下属两个标签属性
                    一个是prefix(文件所在目录) 一个是suffix(文件后缀名) 这样的话，刚才return后的字符串会进行拼接，然后就打开视图层给浏览器响应


三.SpringMvc的各种组件

    1.DispatcherServlet 前端控制器
        相当于mvc模式中的整个核心控制器，整个流程控制的中心，它不会执行方法，它是根据路径切割url，然后在RequestMapper中找到相对应的方法

    2.HandlerMapper 处理器映射器
        根据用户的请求路径找到Handler 处理器。 当然spring中提供了 注解，配置，实现接口方式来进行映射

    3.Handler 处理器
        说白了就是执行我们的业务需求的，执行方法的

    4.HandlerAdapter 处理器适配器
        通过适配器对处理器进行执行，让各种方法变成处理器可以执行的东西

    5.viewResolver 视图解析器
        就是将处理后的结果变成view视图，先解析成页面地址，然后生成view视图对象，然后渲染处理结果给用户看

    6.view 视图
        类似于网页，最常用的视图就是jsp

    <mvc:annotation-driven>:
        在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。

        就是开启mvc可以进行注解配置，并且里面会自动帮我们配置 处理器映射器和处理器适配器


四.SpringMvc的注解说明

    RequestMapping注解:
        作用:
            用于处理 请求URL 和 请求方法之间的对应关系, 当然可以出现在类也可以出现在方法上

        如果出现在类上:
            设置的 value 就是一级目录的位置，下面的方法都在这个一级目录下
        如果在方法上:
            就是访问的第二级目录


        属性:
            value/path: 两个属性的一样意思 ，主要是指定访问的url

            method: 用于指定请求的方式， 例: 指定为post，如果使用get请求，就无法使用此方法

            params: 用于指定请求参数的限制条件，支持简单的表达式，限制请求的key和value的关系
                例子: params = {"username"} 则请求都需要有username
                      params = {"money!100"} 则表示请求的 key, money的value不能为100

            headers: 用于指定限制请求头的消息，和params差不多的做法



五.Spring请求参数绑定入门

    就是在浏览器进行请求中，可以把请求的参数，根据请求的name的值 和 参数的名称进行相匹配，然后传入参数(具体传入规则在params.jsp)

        可以传入的参数有：
            基本类型参数：
                包括基本类型和 String 类型

            POJO 类型参数：
                包括实体类，以及关联的实体类

            数组和集合类型参数：
                包括 List 结构和 Map 结构的集合（包括数组）

            SpringMVC 绑定请求参数是自动实现的，但是要想使用，必须遵循使用要求。

            使用要求：
                如果是基本类型或者 String 类型：
                    要求我们的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)

                如果是 POJO 类型，或者它的关联对象：
                    要求表单中参数名称和 POJO 类的属性名称保持一致。并且控制器方法的参数类型是 POJO 类型。

                如果是集合类型,有两种方式：
                    第一种：
                        要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。
                        给 List 集合中的元素赋值，使用下标。
                        给 Map 集合中的元素赋值，使用键值对。
                    第二种：
                        接收的请求参数是 json 格式数据。需要借助一个注解实现。


    当请求乱码的问题时候：
        在web.xml中配置一个过滤器,进行编码设置。 具体看web.xml


    自定义一个类型转换器

        因为springmvc的绑定是先把收到的数据进行字符串的转换，然后在字符串转换出来再变成所需的数据再封装到类对象中的，所以有的时候格式没控制好就封装不了
            所以出现了自定义类型转换

        1.定义一个类， 实现converter<S,T>接口 主要是把前面的转换成后面的，两个泛型
        2.然后在Springmvc.xml的配置文件中，将自定义的转换器类 注册到类型转换服务中
            主要是放在.ConversionServiceFactoryBean 这个bean里面的一个属性converters
        3. 第三步：在 annotation-driven 标签中引用配置的类型转换服务
            <mvc:annotation-driven conversion-service="converterService"></mvc:annotation-driven>


    如果要获取ServletApi的话:
        直接在接收参数里面接收HttpServletRequest类型的就行了，这样就可以获取最原始的servlet


六.SpringMvc中的常用注解

    1.RequestParam注解
        作用: 用在参数列表上，根据value的值结合request的name值，给参数进行传递，主要解决 name值 和参数名称不一样

        属性:
            value: 请求参数中的名称
            required: 请求参数中是否提供此参数，默认为true

    2.RequestBody
        作用:也是作用与参数列表上，主要是获取请求体的内容， get方法不可以

        属性:
            required: 同上


    3.PathVariable
        作用: 也是作用在参数中,用于Restful请求编程风格中的，获取绑定url中的占位符 ，比如/user/${id} ${id} 就是占位符，获取里面的id值

        属性
            value：指定url中的占位符名称

        Restful风格的URL
            1. 请求路径一样，可以根据不同的请求方式去执行后台的不同方法

            2. restful风格的URL优点
                1. 结构清晰
                2. 符合标准
                3. 易于理解
                4. 扩展方便

    4.RequestHeader
        作用: 作用在参数中，根据value 的值，获取请求头的值

        属性:
            value : 请求头的名称


    5.CookieValue
        作用: 作用在参数中，根据value值，获取cookie名称的值

        属性:
            value : cookie的名称


    6.ModelAttribute
        作用: 可以作用在方法上，也可以作用在参数上

        作用在方法上：
            当前方法会在控制器方法执行前执行
        作用在参数上:
            可以获取指定的数据给参数赋值

        属性：
            value : 用户获取数据的key值，key可以是类对象的名称，也可以是map中的key。

        主要场景就是： 根据名称中数据库中读取到全部信息，然后给另外一个方法去存储或者调用，主要用途可以分有返回值和没返回值
            如果有返回值的话，可以直接让控制器那个方法接收
            如果没有返回值，可以存储到map集合中，然后在控制器方法的参数中使用modelAttribute 的value 获取

    7.SessionAttributes 注解
        作用: 主要作用与类中，就是多次执行控制器方法间的参数共享

        属性：
            value: 指定存入的数据名称
            type: 指定存入的数据类型

        1.首先在方法中使用以下的东西，存入到request域中
            主要要在方法中， 使用Model接口，参数传入 Model model，然后

                    使用Model 对象可以给session中加入参数
                        addAttribute(key,value) 传入数据到request域中共享

                    使用ModelMap对象可以从session中获取参数
                        get(key)  根据key获取参数的值

                    使用SessionStatus 对象可以清空session中的参数
                        setComplete()

        2.在类中配置SessionAttributes( value = {key})
            根据key的名称和request域中相匹配，就可以将数值存储到session域中