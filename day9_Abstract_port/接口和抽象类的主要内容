1.抽象类
2.接口



一.抽象类
1.抽象类的概念
    父类有不确定子类方法的具体实现的时候，可以使用抽象类，然后子类再重写抽象类父类的方法
    比如动物可以吃，但是不确定吃什么，可以先写个抽象类吃的方法，然后子类再重写吃。

2.抽象类方法的格式
    抽象类的方法在子类中必须重写。
    格式: public abstract 返回类型 方法名称();
    然后有抽象方法的类一定是抽象类，类名也要加 abstract  证明抽象类
    抽象类可以有普通方法

3.抽象类和方法的使用
    1. 抽象类不能直接创建对象
    2. 抽象类需要一个子类来继承，然后创建子类的对象
    3. 子类必须覆盖重写抽象类的所有抽象方法
        去掉abstract关键字,然后补上方法体大括号
    4.抽象类可以有构造方法，使用的话和继承关系的使用差不多


二.接口
1.接口基本概念
    接口一个公共规范标准。相当于给出规范。让下面的实例类有个规范，好比如定义方法，然后子类重写
    接口和抽象类一样，不能直接创建兑现对象使用，要实例类要创建使用

2.定义接口的格式:
public interface 接口名称() {
    接口内容
}

3.接口中可以定义的方法
    1.抽象方法
        格式:
            public abstract 返回值类型 抽象方法名称(参数列表);
            注意事项:
            1.抽象方法的名称关键字必须是public abstract
            2.两个关键字可以省略
            3.方法的三要素可以随便定义
            4.如果实现类没有重写接口中的所有抽象方法，那么实现类自己就是抽象类

    2.默认方法
        格式:
            public default 返回值类型 方法名称(参数列表) {方法体}
            注意事项:
            1.默认方法可以使用实例类对象来直接调用
            2.接口的默认方法在实例类中也可以重写

    3.静态方法
        格式:
            public static 返回值类型 方法名称(参数列表) {方法体}
            注意事项:
            1.调用的话不能用实例类对象来调用
            2.只能用接口名称来调用

    4.私有方法
        格式:
            1.普通私有方法   private 返回值类型 方法名称(参数列表) {方法体}
            2.静态私有方法   private static 返回值类型 方法名称(参数列表) {方法体}
        通过接口内的其他方法来调用私有方法，静态只能调用静态。

    5.接口变量定义
        格式:
            public static final 数据类型 变量名称 = 数据值
            final 定义的相当于不可改变
            注意事项:
            1.接口定义的变量三个关键字为public static final，可以省略
            2.接口定义的变量不可以进行修改
            3.推荐完全大写字母进行命名
            4.只能用接口名称进行调用


4.可以实现多个接口，并且可以同时继承父类
    注意事项:
    1.接口没有静态代码块和构造方法
    2.一个类的父类是直接唯一的，但是一个类可以实现多个接口
    public class 类名称 extends 父类名称 implements 接口1, 接口2 {类体}
    3.如果实现类所实现的多个接口中，有重复的抽象方法，覆盖重写一次就行
    4.如果实现类没有重写接口中的抽象方法，那是一个抽象类
    5.实现类中的多个接口中，有相同的默认方法，那实现类必须要重写当中的默认方法
    6.如果父类和接口中的方法冲突了，则执行父类的方法
