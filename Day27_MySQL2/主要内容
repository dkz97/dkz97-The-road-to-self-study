1.约束
2.数据库设计
3.备份数据库









一.约束
    约束概念:
        就是对表中的数据进行限定，保证数据的正确性、有效性和完整性。

    约束的分类:
        1.主键约束:primary key
            1.含义: 值非空并且唯一的
            2.一张表只能有一个字段为主键
            3.主键就是表中记录的唯一表示

            1.创建表的时候添加主键
                create table 表名(列1 数据类型, 列2 数据类型 primary key), 这样 列2 就是为主键了，里面的值不能为null，并且唯一
            2.在表创建后添加主键
                alter table 表名 modify 列名 数据类型 primary key;
            3.在表创建后删除主键 (不一样)
                alter table 表名 drop primary key;

            4.主键可以自动增长
                概念: 如果某一列是数值类型，使用auto_increment可以对主键进行自动增长
                 列名 数据类型 primary key auto_increment 就会自动增长了
                 删除: alter table 表名 modify 列 数据类型;
                 增加: alter table 表名 modify 列 数据类型 auto_increment;

        2.非空约束:not null
            1.在创建表开始就创建非空约束
                create table 表名(列1 数据类型, 列2 数据类型 not null) 这样，列2的数据就是非空的了
            2.在后面对列创建非空约束
                alter table 表名 modify 列 数据类型 not null;
            3.删除非空约束
                alter table 表名 modify 列 数据类型;
            就是后面创建和删除都是修改列就行.

        3.唯一约束:unique
            1. 在创建表开始就创建唯一约束
                create table 表名(列1 数据类型, 列2 数据类型 unique,..)  这样，列2的每行的数据只能是唯一的了
            2. 在后面对列创建非空约束
                alter table 表名 modify 列名 数据类型 unique;
            3. 删除唯一约束
                alter table 表名 modify 列名 数据类型;
            和非空约束一样，后面可以直接利用修改来对其增加和删除

        4.外键约束:foreign key
            是表和表之间的关联关系，保证数据的正确性
            1. 创建表的时候可以添加外键
                1.先创建一个列，是关联外键的
                2.constraint 外键名称(自己起的用来说明用) foreign key (本数据表的列) references 关联表名称(关联表的列名称)

            2.删除
                alter table 表名称 drop foreign key 外键名称;

            3.中途增加
                alter table 表名称 add constraint 外键名称 foreign key (本表的列) references 关联表(关联表的名称)

        5.级联操作
            1.添加级联操作
                语法: alter table 表名称 add constraint 外键名称 foreign key (本地列) references 关联表(关联表名称) 级联操作
            2.分类
                1.级联更新： on update cascade
                2.级联删除： on delete cascade


二.数据库设计
    1.多表之间的关系
        1.一对一：
            如: 人和身份证
                一个人只有一个身份证，一个身份证只有一个人

        2.一对多(多对一):
            如: 部门和员工
                一个部门可以有多个员工，一个员工只能一个部门

        3.多对多:
            如: 课程和学生
                一个学生可以有多个课程，一个课程也可以有多个学生

        实现关系:
            1.一对一
                如在两个表中，两个表的主键建立关联就行

            2.一对多
                比如部门和员工:
                    在员工建立外键列和部门的主键进行联系，就是在多的那个部分中建立外键指向另一方的主键

            3.多对多
                比如课程和学生
                    再建立一个新的表，然后表至少要有两个字段，课程和学生的主键，然后进行联合主键
                    primary key (字段1, 字段2)

    2.数据库设计的范式:
        概念: 设计数据库的时候，需要尊从一定的范式，这样可以设计更好的数据库。要遵守后面的范式的话先遵守前面的范式

        目前一共有六种范式:第一范式(1NF)， 第二范式(2NF)， 第三范式(3NF)， 巴斯-科德范式(BCNF)，第四范式(4NF)， 第五范式(5NF)又称完美范式


        分类:
        第一范式(1NF): 每一列都是不可分割的原子数据项，就是一列中的数据都不能分割到其他地方
        第二范式(2NF): 在1NF的基础上，非码属性必须完全依赖于码(在1NF基础上消除部分函数依赖), 就是不能有部分函数依赖
        第三范式(3NF): 在2NF的基础上，任何非主属性不依赖于其他非主属性(就是消除传递依赖)

        几个概念:
            1.函数依赖: A --> B ，可以通过A属性/A属性组 可以确定唯一的B属性，那么就是B依赖于A
                    例如： 学号 --> 姓名， 学号可以确定唯一姓名

            2.完全函数依赖: 如果A是属性组，只有通过A属性组中的所有属性才能确定B属性，就是B对于A的完全函数依赖
                    例如: (学号,课程) --> 分数， 只有学号和课程才能完全确定分数，单一个学号或者单一个课程不能确定分数

            3.部分函数依赖: 如果A是属性组，A属性组中的某一些值能确定B属性，则是部分依赖
                    例如: (学号,课程)  --> 系别， 学号可以确定系别，课程也可以确定系别，就是部分依赖

            4.传递函数依赖: 就是A可以确定B，B可以确定C，所以A也可以确定C， 就说C是A的传递依赖
                    例如: 学号 --> 姓名，  姓名 --> 系主任，就是学号可以确定系主任

            5.码:  如果在一张表中，一个属性或者一个属性组可以确定表中的其他属性，那这个就被称为码
                    就是一个属性组可以确定同一排的其他属性，那这个属性组就是码

三.备份数据库
    1.命令行:
        语法:
            备份 mysqldump -u用户名 -p密码 数据库名称 > 保存的路径

            还原:
                1.登陆数据库
                2.创建数据库
                3.使用数据库
                4.执行   source 文件路径

    2.图形界面